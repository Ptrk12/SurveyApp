// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(SurveyDbContext))]
    [Migration("20230510175659_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Entities.SurveyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Surveys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "public",
                            Title = "My first survey",
                            UserEmail = "myuser@email.com",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.SurveyQuestionAnswerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SurveyAnswers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Answer = "4"
                        },
                        new
                        {
                            Id = 2,
                            Answer = "7"
                        },
                        new
                        {
                            Id = 3,
                            Answer = "9"
                        },
                        new
                        {
                            Id = 4,
                            Answer = "Park Forest"
                        },
                        new
                        {
                            Id = 5,
                            Answer = "Cycling Running"
                        },
                        new
                        {
                            Id = 6,
                            Answer = "Pizza Burger"
                        },
                        new
                        {
                            Id = 7,
                            Answer = "Patryk"
                        },
                        new
                        {
                            Id = 8,
                            Answer = "300km"
                        },
                        new
                        {
                            Id = 9,
                            Answer = "12"
                        },
                        new
                        {
                            Id = 10,
                            Answer = "444"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.SurveyQuestionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SurveyQuestions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Question = "How many people live in this house ?",
                            Type = "numeric"
                        },
                        new
                        {
                            Id = 2,
                            Question = "How do you rate healthcare in our country ?",
                            Type = "numeric"
                        },
                        new
                        {
                            Id = 3,
                            Question = "How do you rate today's weather ?",
                            Type = "numeric"
                        },
                        new
                        {
                            Id = 4,
                            Question = "Favourite places to spend free time ?",
                            Type = "multiple"
                        },
                        new
                        {
                            Id = 5,
                            Question = "Favourite sports ?",
                            Type = "multiple"
                        },
                        new
                        {
                            Id = 6,
                            Question = "Favourite food ?",
                            Type = "multiple"
                        },
                        new
                        {
                            Id = 7,
                            Question = "What's your name ?",
                            Type = "open"
                        },
                        new
                        {
                            Id = 8,
                            Question = "How far is from Cracow to Warsaw?",
                            Type = "open"
                        },
                        new
                        {
                            Id = 9,
                            Question = "4 x 3 ?",
                            Type = "open"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.SurveyQuestionUserAnswerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SurveyQuestionId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("Infrastructure.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "05824ba0-d8de-4754-8909-72d9c0a42c2b",
                            Email = "myuser@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MYUSER@EMAIL.COM",
                            NormalizedUserName = "MYUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEBGigjFkzjFnA/587pADOyP4hVdvuxZAfbHypztvCYBmN4cjI2frhnj+IOeWh3fzVQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "normaluser"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f90c8937-40d0-4c91-a8ed-a6dad57a7b6e",
                            Email = "admin@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EMAIL.COM",
                            NormalizedUserName = "ADMINISTRATOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEKhda+OEptgJnpQAN4yOLS1O2rSID61FeaNYLeBTczd9dPjduX9KoHLjyj3FpeXQcA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "administrator"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.UserRoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "normaluser",
                            NormalizedName = "NORMALUSER"
                        },
                        new
                        {
                            Id = 2,
                            Name = "administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SurveyEntitySurveyQuestionEntity", b =>
                {
                    b.Property<int>("SurveyQuestionsId")
                        .HasColumnType("int");

                    b.Property<int>("SurveysId")
                        .HasColumnType("int");

                    b.HasKey("SurveyQuestionsId", "SurveysId");

                    b.HasIndex("SurveysId");

                    b.ToTable("SurveyEntitySurveyQuestionEntity");

                    b.HasData(
                        new
                        {
                            SurveyQuestionsId = 1,
                            SurveysId = 1
                        },
                        new
                        {
                            SurveyQuestionsId = 2,
                            SurveysId = 1
                        },
                        new
                        {
                            SurveyQuestionsId = 3,
                            SurveysId = 1
                        },
                        new
                        {
                            SurveyQuestionsId = 4,
                            SurveysId = 1
                        },
                        new
                        {
                            SurveyQuestionsId = 5,
                            SurveysId = 1
                        },
                        new
                        {
                            SurveyQuestionsId = 6,
                            SurveysId = 1
                        },
                        new
                        {
                            SurveyQuestionsId = 7,
                            SurveysId = 1
                        },
                        new
                        {
                            SurveyQuestionsId = 8,
                            SurveysId = 1
                        },
                        new
                        {
                            SurveyQuestionsId = 9,
                            SurveysId = 1
                        });
                });

            modelBuilder.Entity("SurveyQuestionAnswerEntitySurveyQuestionEntity", b =>
                {
                    b.Property<int>("SurveyQuestionAnswersId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyQuestionsId")
                        .HasColumnType("int");

                    b.HasKey("SurveyQuestionAnswersId", "SurveyQuestionsId");

                    b.HasIndex("SurveyQuestionsId");

                    b.ToTable("SurveyQuestionAnswerEntitySurveyQuestionEntity");

                    b.HasData(
                        new
                        {
                            SurveyQuestionAnswersId = 1,
                            SurveyQuestionsId = 1
                        },
                        new
                        {
                            SurveyQuestionAnswersId = 2,
                            SurveyQuestionsId = 2
                        },
                        new
                        {
                            SurveyQuestionAnswersId = 3,
                            SurveyQuestionsId = 3
                        },
                        new
                        {
                            SurveyQuestionAnswersId = 4,
                            SurveyQuestionsId = 4
                        },
                        new
                        {
                            SurveyQuestionAnswersId = 5,
                            SurveyQuestionsId = 5
                        },
                        new
                        {
                            SurveyQuestionAnswersId = 6,
                            SurveyQuestionsId = 6
                        },
                        new
                        {
                            SurveyQuestionAnswersId = 7,
                            SurveyQuestionsId = 7
                        },
                        new
                        {
                            SurveyQuestionAnswersId = 8,
                            SurveyQuestionsId = 8
                        },
                        new
                        {
                            SurveyQuestionAnswersId = 9,
                            SurveyQuestionsId = 9
                        },
                        new
                        {
                            SurveyQuestionAnswersId = 10,
                            SurveyQuestionsId = 1
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.SurveyEntity", b =>
                {
                    b.HasOne("Infrastructure.Entities.UserEntity", "User")
                        .WithMany("Surveys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Entities.SurveyQuestionUserAnswerEntity", b =>
                {
                    b.HasOne("Infrastructure.Entities.SurveyQuestionEntity", "SurveyQuestion")
                        .WithMany()
                        .HasForeignKey("SurveyQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyQuestion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Infrastructure.Entities.UserRoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Infrastructure.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Infrastructure.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Infrastructure.Entities.UserRoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Infrastructure.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SurveyEntitySurveyQuestionEntity", b =>
                {
                    b.HasOne("Infrastructure.Entities.SurveyQuestionEntity", null)
                        .WithMany()
                        .HasForeignKey("SurveyQuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.SurveyEntity", null)
                        .WithMany()
                        .HasForeignKey("SurveysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SurveyQuestionAnswerEntitySurveyQuestionEntity", b =>
                {
                    b.HasOne("Infrastructure.Entities.SurveyQuestionAnswerEntity", null)
                        .WithMany()
                        .HasForeignKey("SurveyQuestionAnswersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.SurveyQuestionEntity", null)
                        .WithMany()
                        .HasForeignKey("SurveyQuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Entities.UserEntity", b =>
                {
                    b.Navigation("Surveys");
                });
#pragma warning restore 612, 618
        }
    }
}
